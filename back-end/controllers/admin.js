const {pool} = require('../utils/database');
const csvParser = require('csv-parser');
const fs = require('fs');


exports.getIndex = (req, res, next) => {
    res.status(200).json({ message: 'Hello Admin' });
}

exports.getHealthcheck = (req, res, next) => {
    // Code generated by Chatgpd
    const query = 'SELECT NOW()'; // Replace with your actual database connectivity check logic

    pool.getConnection((err, connection) => {
        if (err) {
            console.error(err);
            return res.status(500).json({ status: 'failed', message: ['connection string'] });
        }

        connection.query(query, (err, result) => {
            connection.release();

            if (err) {
                console.error(err);
                return res.status(500).json({ status: 'failed', message: ['connection string'] });
            }

            res.status(200).json({ status: 'OK', message: ['connection string'] });
        });
    });
}


exports.uploadTitleEpisode = (req, res) => {
    try {
        const tsvFilePath = req.file.path;
        const data = fs.readFileSync(tsvFilePath, 'utf8');
        const rows = data.split('\n').map(row => row.split('\t'));

        // Define your database query
        const insertQuery_TitleObject = 'INSERT INTO TitleObject (movie_id,type,primary_title,original_title,is_adult,start_year,end_year,runtime_min,image_url) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)';
        const insertQuery_Genres = 'INSERT INTO Genres (movie_id,genre) VALUES (?, ?)';

        for (let i = 1; i < rows.length; i++) {

            const values_for_TitleObject = [rows[i][0], rows[i][1], rows[i][2], rows[i][3], rows[i][4], rows[i][5], rows[i][6], rows[i][7], rows[i][9]];

            pool.getConnection((err, connection) => {
                if (err) {
                    console.error('Error getting connection:', err);
                    return res.status(500).json({ error: 'Internal Server Error' });
                }

                connection.query(insertQuery_TitleObject,values_for_TitleObject, (error, results) => {
                    if (error) {
                        console.error('Error executing query');
                    }
                });
                try{
                    const genres = rows[i][8].split(',');
                    for (let j = 0; j < genres.length; j++) {
                        const values_for_Genres = [rows[i][0], genres[j]];
                        
                        connection.query(insertQuery_Genres, values_for_Genres, (error, results) => {
                            if (error) {
                                console.error('Error executing query');
                            }
                        });
                    }
                } catch (error) {
                    console.error("Error in genres");
                }
                connection.release();
            });
        }
        fs.unlinkSync(tsvFilePath);

        // Send a response
        res.status(200).json({ message: 'File uploaded and processed successfully.' });
    } catch (error) {
        console.error(error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
};
